#!/usr/bin/env lua
local parser = require("argparse")("tlld","'linker' for the uhhh transpiler (using teal)")
parser:argument("input", "input file"):args("+")
parser:option("-o --output", "output file")
parser:flag("--version", "show (fake) version info")
parser:flag("-V", "show version info")
local argg = parser:parse()
if argg.version then
   return print("GNU ld (GNU Binutils for Debian) 2.40")
elseif argg.V then
   return print("tlld v0.0.1")
end
local function execute(s)
   if argg.output ~= nil then print("> "..s) end
   os.execute(s)
end
local function popen(s)
   if argg.output ~= nil then print("> "..s) end
   return assert(io.popen(s,"r")):read("*a")
end
local function split(a,b)
   local m = {}
   for mat in a:gmatch("(.-)"..b) do
      table.insert(m,mat)
   end
   return m
end
local function remove_empty_lines(src)
   src=src:gsub("\n+","\n")
   if src:sub(1,1)=="\n" then src=src:sub(2) end
   if src:sub(-1)=="\n" then src=src:sub(1,-2) end
   return src
end
local dir = "/tmp/tlld"
local ardir = "/tmp/tlld_ar"
-- os.execute("rm -rf "..dir)
execute("mkdir -p "..dir)
for _,v in next, argg.input do
   local spl = split(v,"/")
   if #spl > 0 then
      execute("mkdir -p "..dir.."/"..table.concat(spl,"/",1,#spl))
   end
end
local files = {}
local curdir = popen("pwd"):sub(1,-2)
print(curdir)
for _,v in next, argg.input do
   if v:sub(-2)==".a" then
      local rp = popen("realpath "..v):sub(1,-2)
      execute("mkdir -p "..ardir.." && cd "..ardir.." && ar x "..rp.." && cd "..curdir)
      local res = popen("cd "..ardir.." && ls -1 && cd "..curdir);
      for _,v2 in next, split(res,"\n") do
         execute("tl gen --gen-compat off -o "..dir.."/"..v..".lua "..ardir.."/"..v2.." >/dev/null")
         table.insert(files,dir.."/"..v2..".lua")
      end
      if argg.output~=nil then
         print("Processed: "..v)
      end
   else
      execute("tl gen --gen-compat off -o "..dir.."/"..v..".lua "..v.." >/dev/null")
      if argg.output~=nil then
         print("Processed: "..v)
      end
      table.insert(files,dir.."/"..v..".lua")
   end
end
local outs = ""
local had_d = false
for i,v in next, files do
   local f,e = io.open(v,"r")
   if f==nil then error("Error reading from temp dir: "..tostring(e)) end
   local out = remove_empty_lines(f:read("*a"))
   local spl = split(out.."\n","\n")
   -- print(spl[1])
   -- print("spl[1]=",spl[1]:find("local _D = {};"),i~=1)
   if spl[1]:find("local _D = [^;]*;") and i~=1 then
      table.remove(spl,1)
   end
   -- print(spl[#spl])
   -- print("spl[#spl]=",spl[#spl]:find("return _D"),i,i==1)
   if spl[#spl]:find("return _D") and i~=#files then
      table.remove(spl,#spl)
      had_d=true
   end
   outs=outs..table.concat(spl,"\n").."\n\n"
   f:close()
   -- print("-- end of file "..i)
end
outs=outs:sub(1,-3)
outs=remove_empty_lines(outs)
if argg.output and argg.output~="-" then
   local f = io.open(argg.output,"w")
   if f==nil then error("Error opening output.") end
   f:write(outs)
   f:close()
   print("Copied: "..argg.output)
else
   io.write(outs)
end
-- os.execute("rm -rf "..dir)
