#!/usr/bin/env lua
local parser = require("argparse")("tlld","'linker' for the uhhh transpiler (using teal)")
parser:argument("input", "input file"):args("*")
parser:option("-o --output", "output file")
parser:flag("--version", "show (fake) version info")
parser:flag("-V", "show version info")
local argg = parser:parse()
if argg.version then
   return print("GNU ld (GNU Binutils for Debian) 2.40")
elseif argg.V then
   return print("tlld v0.0.1")
end
local function execute(s)
   if argg.output ~= nil then print("> "..s) end
   os.execute(s)
end
local function split(a,b)
   local m = {}
   for mat in a:gmatch("(.-)"..b) do
      table.insert(m,mat)
   end
   return m
end
local function remove_empty_lines(src)
   src=src:gsub("\n+","\n")
   if src:sub(1,1)=="\n" then src=src:sub(2) end
   if src:sub(-1)=="\n" then src=src:sub(1,-2) end
   return src
end
local dir = "/tmp/tlld"
-- os.execute("rm -rf "..dir)
os.execute("mkdir -p "..dir)
for _,v in next, argg.input do
   local spl = split(v,"/")
   if #spl > 0 then
      execute("mkdir -p "..dir.."/"..table.concat(spl,"/",1,#spl))
   end
end
for _,v in next, argg.input do
   if v:sub(-2)==".a" then
   else
      execute("tl gen --gen-compat off -o "..dir.."/"..v..".lua "..v.." >/dev/null")
      if argg.output~=nil then
         print("Processed: "..v)
      end
   end
end
local outs = ""
local had_d = false
for i,v in next, argg.input do
   if v:sub(-2)==".a" then
      if i==#argg.input and had_d then
         outs=outs.."return _D;\n\n"
      end
   else
      local f,e = io.open(dir.."/"..v..".lua","r")
      if f==nil then error("Error reading from temp dir: "..tostring(e)) end
      local out = remove_empty_lines(f:read("*a"))
      local spl = split(out.."\n","\n")
      -- print(spl[1])
      -- print("spl[1]=",spl[1]:find("local _D = {};"),i~=1)
      if spl[1]:find("local _D = [^;]*;") and i~=1 then
         table.remove(spl,1)
      end
      -- print(spl[#spl])
      -- print("spl[#spl]=",spl[#spl]:find("return _D"),i,i==1)
      if spl[#spl]:find("return _D") and i~=#argg.input then
         table.remove(spl,#spl)
         had_d=true
      end
      outs=outs..table.concat(spl,"\n").."\n\n"
      f:close()
      -- print("-- end of file "..i)
   end
end
outs=outs:sub(1,-3)
outs=remove_empty_lines(outs)
if argg.output and argg.output~="-" then
   local f = io.open(argg.output,"w")
   if f==nil then error("Error opening output.") end
   f:write(outs)
   f:close()
   print("Copied: "..argg.output)
else
   io.write(outs)
end
-- os.execute("rm -rf "..dir)
